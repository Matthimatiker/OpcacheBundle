{# @see http://symfony.com/doc/current/cookbook/profiler/data_collector.html #}
{# @var collector \Matthimatiker\OpcacheBundle\DataCollector\ByteCodeCacheDataCollector #}
{% extends 'WebProfilerBundle:Profiler:layout.html.twig' %}

{% block toolbar %}
    {% set icon %}
        {# This block appears in the toolbar. #}
        {% set memory_status_color = (collector.byteCodeCache.memory.full) ? 'red' : ((collector.byteCodeCache.memory.usageInPercent) >= 80 ? 'yellow' : 'green') %}
        <span class="icon">
            <svg width="13" height="28" xmlns="http://www.w3.org/2000/svg" version="1.1" x="0px" y="0px" viewBox="0 0 13 28" enable-background="new 0 0 13 28" xml:space="preserve">
                <g><rect x="3" y="11" fill="#BCBCBB" width="7" height="9"/></g>
                <g><path fill="#3F3F3F" d="M11 6V21H2V6H0V22c0 0.6 0.4 1 1 1h11c0.6 0 1-0.4 1-1V6H11z"/></g>
            </svg>
        </span>
        <span class="sf-toolbar-status sf-toolbar-status-{{ memory_status_color }}">
            {{ '%.0f' | format(collector.byteCodeCache.memory.usageInMb) }} / {{ '%.0f' | format(collector.byteCodeCache.memory.sizeInMb) }} MB
        </span>
    {% endset %}

    {% set text %}
        {# This block is shown on hover. #}
        <div class="sf-toolbar-info-piece">
            <b>Opcache</b>
        </div>
        {% set memory_status_color = (collector.byteCodeCache.memory.full) ? 'red' : ((collector.byteCodeCache.memory.usageInPercent) >= 80 ? 'yellow' : 'green') %}
        <div class="sf-toolbar-info-piece">
            <b>Memory usage</b>
            <span class="sf-toolbar-status sf-toolbar-status-{{ memory_status_color }}">
                {{ '%.2f' | format(collector.byteCodeCache.memory.usageInMb) }} / {{ '%.2f' | format(collector.byteCodeCache.memory.sizeInMb) }} MB
            </span>
        </div>
        {% set hit_ratio_status_color = (collector.byteCodeCache.statistics.hitRateInPercent >= 90.0) ? 'green' : ((collector.byteCodeCache.statistics.hitRateInPercent) >= 70.0 ? 'yellow' : 'red') %}
        <div class="sf-toolbar-info-piece">
            <b>Hit ratio</b>
            <span class="sf-toolbar-status sf-toolbar-status-{{ hit_ratio_status_color }}">
                {{ '%.2f' | format(collector.byteCodeCache.statistics.hitRateInPercent) }}%
            </span>
        </div>
    {% endset %}

    {# Include a link to the details panel. #}
    {{ include('@WebProfiler/Profiler/toolbar_item.html.twig', { 'link': true }) }}
{% endblock %}

{% block head %}
    {{ parent() }}
    {# Chart.js documentation at http://www.chartjs.org/docs #}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js" charset="utf-8"></script>
{% endblock %}

{% block menu %}
    {# This left-hand menu appears when using the full-screen profiler. #}
    <span class="label">
        <span class="icon">
            <svg width="38" height="28" xmlns="http://www.w3.org/2000/svg" version="1.1" x="0px" y="0px" viewBox="0 0 13 28" enable-background="new 0 0 13 28" xml:space="preserve">
                <g><rect x="3" y="11" fill="#BCBCBB" width="7" height="9"/></g>
                <g><path fill="#3F3F3F" d="M11 6V21H2V6H0V22c0 0.6 0.4 1 1 1h11c0.6 0 1-0.4 1-1V6H11z"/></g>
            </svg>
        </span>
        <strong>Opcache</strong>
    </span>
{% endblock %}

{% block panel %}
    {# Shows details about the cache state. #}
    <h2>Opcache</h2>
    <div>
        <h3>Memory usage</h3>
        <canvas id="byteCodeCacheMemoryUsage" width="300" height="300"></canvas>
        <script type="application/javascript">
            (function () {
                var ctx = document.getElementById("byteCodeCacheMemoryUsage").getContext("2d");
                var data = [
                    {
                        value: {{ collector.byteCodeCache.memory.usageInMb }},
                        color:"#F7464A",
                        highlight: "#FF5A5E",
                        label: "Used"
                    },
                    {
                        value: {{ collector.byteCodeCache.memory.freeInMb }},
                        color: "#46BFBD",
                        highlight: "#5AD3D1",
                        label: "Free"
                    }
                ];
                new Chart(ctx).Doughnut(data, {
                    tooltipTemplate: "<%= label %>: <%= value.toFixed(2) %> MB"
                });
            })();
        </script>

        <table>
            <thead>
                <tr>
                    <th scope="col">Memory</th>
                    <th scope="col">MB</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th>Used</th>
                    <td>{{ '%.2f' | format(collector.byteCodeCache.memory.usageInMb) }}</td>
                </tr>
                <tr>
                    <th>Free</th>
                    <td>{{ '%.2f' | format(collector.byteCodeCache.memory.freeInMb) }}</td>
                </tr>
                <tr >
                    <th style="border-top: 2px solid #d0dbb3;">Size</th>
                    <td style="border-top: 2px solid black;">{{ '%.2f' | format(collector.byteCodeCache.memory.sizeInMb) }}</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div>
        <h3>Hit ratio</h3>
        <canvas id="byteCodeCacheHitRatio" width="300" height="300"></canvas>
        <script type="application/javascript">
            (function () {
                var ctx = document.getElementById("byteCodeCacheHitRatio").getContext("2d");
                var data = [
                    {
                        value: {{ collector.byteCodeCache.statistics.hits }},
                        color: "#F7464A",
                        highlight: "#FF5A5E",
                        label: "Hits"
                    },
                    {
                        value: {{ collector.byteCodeCache.statistics.misses }},
                        color: "#46BFBD",
                        highlight: "#5AD3D1",
                        label: "Misses"
                    }
                ];
                new Chart(ctx).Doughnut(data);
            })();
        </script>
    </div>
{% endblock %}
